apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply plugin: 'kotlin-android'
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

project.ext.react = [
        nodeExecutableAndArgs: ["node", "--max_old_space_size=8192"]
];

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
    //
    // Added by install-expo-modules
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", rootDir.getAbsoluteFile().getParentFile().getAbsolutePath(), "android", "absolute"].execute(null, rootDir).text.trim())
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
}

def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

def getMyVersionCode = { ->
    return project.hasProperty('versionCode') ? versionCode.toInteger() : 10218
}

// get version name from the specified property argument `-PversionName` during the build call
def getMyVersionName = { ->
    return project.hasProperty('versionName') ? versionName : "2.9"
}


android {
    def keystorePropertiesFile = rootProject.file("keystore.properties")
    def keystoreProperties = new Properties()
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    lintOptions {
        abortOnError false
    }
    packagingOptions {
        pickFirst 'lib/x86/libcrypto.so'
        pickFirst 'lib/x86_64/libcrypto.so'
        pickFirst 'lib/armeabi-v7a/libcrypto.so'
        pickFirst 'lib/arm64-v8a/libcrypto.so'
    }
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    namespace "com.coinswallet"
    defaultConfig {
        applicationId "com.dok.wallet"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getMyVersionCode()
        versionName getMyVersionName()
        missingDimensionStrategy 'react-native-camera', 'general'
        resValue "string", "build_config_package", "com.coinswallet"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        dokwalletRelease {
            // Uncomment this if you make build locally.
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["CM_DOKWALLET_STORE_FILE"])
                storePassword System.getenv()["CM_DOKWALLET_STORE_PASSWORD"]
                keyAlias System.getenv()["CM_DOKWALLET_KEY_ALIAS"]
                keyPassword System.getenv()["CM_DOKWALLET_KEY_PASSWORD"]
            }else if (keystoreProperties.containsKey('DOKWALLET_UPLOAD_STORE_FILE')) {
                storeFile file(keystoreProperties['DOKWALLET_UPLOAD_STORE_FILE'])
                storePassword keystoreProperties['DOKWALLET_UPLOAD_STORE_PASSWORD']
                keyAlias keystoreProperties['DOKWALLET_UPLOAD_KEY_ALIAS']
                keyPassword keystoreProperties['DOKWALLET_UPLOAD_KEY_PASSWORD']
            }
        }
        kimlwalletRelease {
            // Uncomment this if you make build locally.
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["CM_KIMLWALLET_STORE_FILE"])
                storePassword System.getenv()["CM_KIMLWALLET_STORE_PASSWORD"]
                keyAlias System.getenv()["CM_KIMLWALLET_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KIMLWALLET_KEY_PASSWORD"]
            } else if (keystoreProperties.containsKey('KIMLWALLET_UPLOAD_STORE_FILE')) {
                storeFile file(keystoreProperties['KIMLWALLET_UPLOAD_STORE_FILE'])
                storePassword keystoreProperties['KIMLWALLET_UPLOAD_STORE_PASSWORD']
                keyAlias keystoreProperties['KIMLWALLET_UPLOAD_KEY_ALIAS']
                keyPassword keystoreProperties['KIMLWALLET_UPLOAD_KEY_PASSWORD']
            }
        }
    }
    flavorDimensions = ["default"]
    productFlavors {
        dokwallet {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "com.dok.wallet"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "com.coinswallet"
            signingConfig signingConfigs.dokwalletRelease
        }
        kimlwallet {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "com.kimlwallet"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "com.coinswallet"
            signingConfig signingConfigs.kimlwalletRelease
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            manifestPlaceholders = [usesCleartextTraffic:"true"]
            matchingFallbacks = ['debug', 'release']
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            manifestPlaceholders = [usesCleartextTraffic:"false"]
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.0"
    // implementation 'com.github.WalletConnect:walletconnectv2:0.2.0'
    implementation 'com.walletconnect:android-core:1.18.0'
    implementation 'com.walletconnect:web3wallet:1.11.0'
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    // implementation(name: 'wallet-core-debug', ext: 'aar')
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    // implementation 'org.bitcoinj:bitcoinj-core:0.15.10'

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
